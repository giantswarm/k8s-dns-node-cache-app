apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  updateStrategy: {{ toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
        giantswarm.io/monitoring: "true"
    spec:
      priorityClassName: system-node-critical
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      serviceAccountName: {{ .Values.name }}
      hostNetwork: true
      dnsPolicy: Default  # Don't use cluster DNS.
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      - effect: "NoExecute"
        operator: "Exists"
      - effect: "NoSchedule"
        operator: "Exists"
      containers:
      - name: node-cache
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 8 }}
        {{- end }}
        args:
        - "-localip"
        - "{{ .Values.cluster.kubernetes.DNS.IP }}"
        - "-conf"
        - "/etc/Corefile"
        - "-upstreamsvc"
        - "{{ .Values.name }}-upstream"
        - -dns.port
        - "{{ .Values.upstreamService.servicePort }}"
        - -health-port
        - "{{ .Values.ports.liveness }}"
        - -metrics-listen-address
        - "0.0.0.0:{{ .Values.ports.prometheus.nodecache }}"
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
        ports:
        - containerPort: {{ .Values.upstreamService.servicePort }}
          name: udp
          protocol: UDP
        - containerPort: {{ .Values.upstreamService.servicePort }}
          name: tcp
          protocol: TCP
        - containerPort: {{ .Values.ports.prometheus.nodecache }}
          name: metrics
          protocol: TCP
        - containerPort: {{ .Values.ports.prometheus.coredns }}
          name: corednsmetrics
          protocol: TCP
        livenessProbe:
          httpGet:
            host: {{ .Values.cluster.kubernetes.DNS.IP }}
            path: /health
            port: {{ .Values.ports.liveness }}
          initialDelaySeconds: 60
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /run/xtables.lock
          name: xtables-lock
          readOnly: false
        - name: config-volume
          mountPath: /etc/coredns
        - name: kube-dns-config
          mountPath: /etc/kube-dns
      volumes:
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
      - name: kube-dns-config
        configMap:
          name: kube-dns
          optional: true
      - name: config-volume
        configMap:
          name: {{ .Values.name }}
          items:
            - key: Corefile
              path: Corefile.base
